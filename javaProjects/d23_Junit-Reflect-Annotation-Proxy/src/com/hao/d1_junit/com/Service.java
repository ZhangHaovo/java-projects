package com.hao.d1_junit.com;
/**单元测试
 开发好的系统中存在很多的方法，如何对这些方法的正确性进行测试。

 反射
 如何在程序运行时去得到Class对象，然后去获取Class中的每个成分。

 注解

 动态代理
 框架技术的底层会用到的。*/

/**
 * 1.单元测试
 * 单元测试就是针对最小的功能单元编写测试代码，Java程序最小的功能单元是方法，因此，单元测试就是针对Java方法的测试，进而检查方法的正确性。
 *
 * 2.目前测试方法是怎么进行的，存在什么问题
 * - 只有一个main方法，如果一个方法的测试失败了，其他方法测试会受到影响。
 * - 无法得到测试的结果报告，需要程序员自己去观察测试是否成功。
 * - 无法实现自动化测试。
 *
 * Junit单元测试框架
 * - JUnit是使用Java语言实现的单元测试框架，它是开源的，Java开发者都应当学习并使用JUnit编写单元测试。
 * - 此外，几乎所有的IDE工具都集成了JUnit，这样我们就可以直接在IDE中编写并运行JUnit测试，JUnit目前最新版本是5。
 *
 * JUnit优点
 * - JUnit可以灵活的选择执行哪些测试方法，可以一键执行全部测试方法。
 * -  Junit可以生成全部方法的测试报告。
 * -  单元测试中的某个方法测试失败了，不会影响其他测试方法的测试。
 *
 * 步骤：
 * 编写测试方法：该测试方法必须是 公共的 无参数 无返回值 的非静态方法。
 * 在测试方法上使用@Test注解：标注该方法是一个测试方法
 * 在测试方法中完成被测试方法的预期正确性测试。
 * 选中测试方法，选择“JUnit运行” ，如果测试良好则是绿色；如果测试失败，则是红色
 *
 *Junit常用注解:
 * @ Test 测试方法
 * @ Before 用来修饰实例方法，该方法会在每一个测试方法执行之前执行一次。
 * @ After 用来修饰实例方法，该方法会在每一个测试方法执行之后执行一次。
 * @ BeforeClass 用来静态修饰方法，该方法会在所有测试方法之前只执行一次。
 * @ AfterClass 用来静态修饰方法，该方法会在所有测试方法之后只执行一次。
 * */


public class Service {
    public String loginName(String loginName , String password){
        if ("admin".equals(loginName) && "123456".equals(password)){
            return "登录成功";
        }else{
            return "有问题";
        }
    }

    public void selectName(){
        System.out.println(10/0);       //异常
        System.out.println("查询全部用户名成功");
    }
}
